


ARM Macro Assembler    Page 1 


    1 00000000         ; Exemplo.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Ianca Polizelo e Gustavo Zeni
    4 00000000         ; 29/03/2022
    5 00000000         
    6 00000000         ; ------------------------------------------------------
                       -------------------------
    7 00000000                 THUMB                        ; Instruções do tip
                                                            o Thumb-2
    8 00000000         ; ------------------------------------------------------
                       -------------------------
    9 00000000         ; Declarações EQU - Defines
   10 00000000         ;<NOME>         EQU <VALOR>
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         ; Área de Dados - Declarações de variáveis
   13 00000000                 AREA             DATA, ALIGN=2
   14 00000000         ; Se alguma variável for chamada em outro arquivo
   15 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   16 00000000         ; partir de outro arquivo
   17 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   18 00000000         ; de <tam> bytes a partir da primeira 
   19 00000000         ; posição da RAM  
   20 00000000         
   21 00000000         ; ------------------------------------------------------
                       -------------------------
   22 00000000         ; Área de Código - Tudo abaixo da diretiva a seguir será
                        armazenado na memória de 
   23 00000000         ;                  código
   24 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   25 00000000         
   26 00000000         ; Se alguma função do arquivo for chamada em outro arqui
                       vo 
   27 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a part
                                                            ir de 
   28 00000000         ; outro arquivo. No caso startup.s
   29 00000000         
   30 00000000         ; Se chamar alguma função externa 
   31 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   32 00000000         ; função <func>
   33 00000000         
   34 00000000         ; ------------------------------------------------------
                       -------------------------
   35 00000000         ; Função main()
   36 00000000         
   37 00000000         ; Variáveis que salvam o endereço de memória RAM 
   38 00000000         ; números aleatórios
   39 00000000 20000A00 
                       ALEATORIO
                               EQU              0x20000A00
   40 00000000         ; números ordenados
   41 00000000 20000B00 
                       ORDENADO
                               EQU              0x20000B00



ARM Macro Assembler    Page 2 


   42 00000000         
   43 00000000         Start
   44 00000000         ; Comece o código aqui <================================
                       ======================
   45 00000000         
   46 00000000         ;tamanho do vetor aleatório
   47 00000000 F04F 0C14       MOV              R12, #20
   48 00000004         
   49 00000004         ;salva no R0 o começo do vetor aleatório
   50 00000004 484D            LDR              R0, =ALEATORIO
   51 00000006         
   52 00000006         ;adicionando números na memória
   53 00000006 F04F 01C1       MOV              R1, #193
   54 0000000A F800 1B08       STRB             R1, [R0], #8 ;grava R1 no [R0] 
                                                            e soma +8 pra ir pr
                                                            o
   55 0000000E         ;próximo endereço
   56 0000000E         
   57 0000000E F04F 013F       MOV              R1, #63
   58 00000012 F800 1B08       STRB             R1, [R0], #8
   59 00000016         
   60 00000016 F04F 01B0       MOV              R1, #176
   61 0000001A F800 1B08       STRB             R1, [R0], #8
   62 0000001E         
   63 0000001E F04F 017F       MOV              R1, #127
   64 00000022 F800 1B08       STRB             R1, [R0], #8
   65 00000026         
   66 00000026 F04F 012B       MOV              R1, #43
   67 0000002A F800 1B08       STRB             R1, [R0], #8
   68 0000002E         
   69 0000002E F04F 010D       MOV              R1, #13
   70 00000032 F800 1B08       STRB             R1, [R0], #8
   71 00000036         
   72 00000036 F04F 01D3       MOV              R1, #211
   73 0000003A F800 1B08       STRB             R1, [R0], #8
   74 0000003E         
   75 0000003E F04F 0103       MOV              R1, #3
   76 00000042 F800 1B08       STRB             R1, [R0], #8
   77 00000046         
   78 00000046 F04F 01CB       MOV              R1, #203
   79 0000004A F800 1B08       STRB             R1, [R0], #8
   80 0000004E         
   81 0000004E F04F 0105       MOV              R1, #5
   82 00000052 F800 1B08       STRB             R1, [R0], #8
   83 00000056         
   84 00000056 F04F 0115       MOV              R1, #21
   85 0000005A F800 1B08       STRB             R1, [R0], #8
   86 0000005E         
   87 0000005E F04F 0107       MOV              R1, #7
   88 00000062 F800 1B08       STRB             R1, [R0], #8
   89 00000066         
   90 00000066 F04F 01CE       MOV              R1, #206
   91 0000006A F800 1B08       STRB             R1, [R0], #8
   92 0000006E         
   93 0000006E F04F 01F5       MOV              R1, #245
   94 00000072 F800 1B08       STRB             R1, [R0], #8
   95 00000076         
   96 00000076 F04F 019D       MOV              R1, #157
   97 0000007A F800 1B08       STRB             R1, [R0], #8



ARM Macro Assembler    Page 3 


   98 0000007E         
   99 0000007E F04F 01ED       MOV              R1, #237
  100 00000082 F800 1B08       STRB             R1, [R0], #8
  101 00000086         
  102 00000086 F04F 01F1       MOV              R1, #241
  103 0000008A F800 1B08       STRB             R1, [R0], #8
  104 0000008E         
  105 0000008E F04F 0169       MOV              R1, #105
  106 00000092 F800 1B08       STRB             R1, [R0], #8
  107 00000096         
  108 00000096 F04F 01FC       MOV              R1, #252
  109 0000009A F800 1B08       STRB             R1, [R0], #8
  110 0000009E         
  111 0000009E F04F 0113       MOV              R1, #19
  112 000000A2 F800 1B08       STRB             R1, [R0], #8
  113 000000A6         
  114 000000A6 4825            LDR              R0, =ALEATORIO ;Começo do vetor
                                                             de números aleatór
                                                            ios
  115 000000A8 4925            LDR              R1, =ORDENADO ;Começo do vetor 
                                                            de números primos s
                                                            alvos
  116 000000AA         
  117 000000AA F04F 0200       MOV              R2, #0      ;Tamanho do 'vetor'
                                                             de números primos 
                                                            (vetor ordenado)
  118 000000AE F04F 0700       MOV              R7, #0      ;Incremento do whil
                                                            e externo (pra sabe
                                                            r quando terminou d
                                                            e varrer
  119 000000B2         ;o vetor de números aleatórios
  120 000000B2         
  121 000000B2         loop                                 ;while externo - co
                                                            meça com 2 e vai at
                                                            é o número
  122 000000B2 F04F 0302       MOV              R3, #2
  123 000000B6         
  124 000000B6         primo
  125 000000B6         
  126 000000B6         ;Resetar o carry
  127 000000B6 F04F 0801       MOV              R8, #1
  128 000000BA F1B8 0F02       CMP              R8, #2
  129 000000BE         
  130 000000BE 7804            LDRB             R4, [R0]    ;Le da memoria o R0
                                                             e salva em R4
  131 000000C0 42A3            CMP              R3, R4      ;Compara R3 com R4 
                                                            (R3-R4) ->
  132 000000C2         ;R3: identador // R4: valor a definir se é primo
  133 000000C2         
  134 000000C2 BF3A            ITTE             CC          ;if R3 < R4
  135 000000C4 FBB4 F5F3       UDIVCC           R5, R4, R3  ;Divide R4 por R3
  136 000000C8 FB03 4615       MLSCC            R6, R3, R5, R4 ;R6 é o resto da
                                                             divisão
  137 000000CC E004            BCS              caboprimo   ;se R3 >= R4 então 
                                                            chegou no R4
  138 000000CE         ;então é primo
  139 000000CE         
  140 000000CE 2E00            CMP              R6, #0      ;compara o resto co
                                                            m 0



ARM Macro Assembler    Page 4 


  141 000000D0 BF1C            ITT              NE          ;se resto != 0, pod
                                                            e ser primo 
  142 000000D2 1C5B            ADDNE            R3, R3, #1  ;se for diferente, 
                                                            incrementa R3 
  143 000000D4 E7EF            BNE              primo       ;volta pro loop de 
                                                            teste de primo
  144 000000D6 D00A            BEQ              cabonaoprimo ;se o resto = 0 en
                                                            tão não é primo
  145 000000D8         
  146 000000D8         caboprimo                            ;se for primo
  147 000000D8         
  148 000000D8 F102 0201       ADD              R2, R2, #1  ;Incrementa o taman
                                                            ho do vetor ordenad
                                                            o de primos
  149 000000DC F801 4B08       STRB             R4, [R1], #8 ;Salva o R4 em R1 
                                                            e soma 8 em R1 pra 
                                                            ir pro próximo slot
                                                             de memória
  150 000000E0 F100 0008       ADD              R0, R0, #8  ;Soma 8 no R0 p/ ir
                                                             pro próx num do ve
                                                            tor aleatório
  151 000000E4         
  152 000000E4 F107 0701       ADD              R7, R7, #1  ;Incrementa R7 pra 
                                                            avançar 1 no while
  153 000000E8 4567            CMP              R7, R12     ;Compara R7 com o v
                                                            etor aleatório p/ s
                                                            aber se acabou de v
                                                            arrer o vetor
  154 000000EA         
  155 000000EA D3E2            BCC              loop        ;se for menor, volt
                                                            a pro loop
  156 000000EC D206            BCS              comecaordenacao ;se for maior o
                                                            u igual, vai pra or
                                                            denação
  157 000000EE         
  158 000000EE         cabonaoprimo                         ;se não for primo
  159 000000EE F100 0008       ADD              R0, R0, #8  ;incrementa o R0 pr
                                                            a ir pro próximo nú
                                                            mero do vetor aleat
                                                            ório
  160 000000F2         
  161 000000F2 F107 0701       ADD              R7, R7, #1  ;incrementa R7 pra 
                                                            avançar 1 no while
  162 000000F6 4567            CMP              R7, R12     ;compara R7 com o v
                                                            etor aleatório p/ s
                                                            aber se acabou de v
                                                            arrer o vetor
  163 000000F8         
  164 000000F8 D3DB            BCC              loop        ;se não acabou, vol
                                                            ta pro loop
  165 000000FA D2FF            BCS              comecaordenacao ;se acabou, vai
                                                             pro começa a orden
                                                            ação
  166 000000FC         
  167 000000FC         
  168 000000FC         ;A partir daqui vamos ordenar o vetor ORDENADO, que agor
                       a contem apenas os número primos.
  169 000000FC         ;Assim, dessa forma, o vetor ALEATORIO, não importa mais
                       , vamos mexer apenas com o ORDENADO



ARM Macro Assembler    Page 5 


  170 000000FC         ;Recaptulando: R1 = posição do vetor ordenado, R2 = tama
                       nho do vetor ordenado
  171 000000FC         comecaordenacao
  172 000000FC         
  173 000000FC 4610            MOV              R0, R2
  174 000000FE F1A0 0001       SUB              R0, R0, #1
  175 00000102         
  176 00000102         
  177 00000102 F04F 0301       MOV              R3, #1      ;Iterador do for ex
                                                            terno
  178 00000106         
  179 00000106         forexterno
  180 00000106 490E            LDR              R1, =ORDENADO ;Reseta o R1 pra 
                                                            posição inicial do 
                                                            vetor ORDENADO
  181 00000108 4293            CMP              R3, R2
  182 0000010A D215            BCS              acabou
  183 0000010C         
  184 0000010C F04F 0400       MOV              R4, #0      ;Iterador do for in
                                                            terno
  185 00000110         
  186 00000110         forinterno
  187 00000110 F811 5B08       LDRB             R5, [R1], #8
  188 00000114 780E            LDRB             R6, [R1]
  189 00000116         
  190 00000116         ;Resetar o carry
  191 00000116 F04F 0801       MOV              R8, #1
  192 0000011A F1B8 0F02       CMP              R8, #2
  193 0000011E         
  194 0000011E         ;Compara
  195 0000011E 42B5            CMP              R5, R6
  196 00000120 BF22            ITTT             CS
  197 00000122 3908            SUBCS            R1, R1, #8
  198 00000124 F801 6B08       STRBCS           R6, [R1], #8
  199 00000128 700D            STRBCS           R5, [R1]
  200 0000012A         
  201 0000012A F104 0401       ADD              R4, R4, #1  ;for interno
  202 0000012E 4284            CMP              R4, R0
  203 00000130 D3EE            BCC              forinterno
  204 00000132 BF24            ITT              CS
  205 00000134 1C5B            ADDCS            R3, R3, #1
  206 00000136 E7E6            BCS              forexterno
  207 00000138         
  208 00000138         
  209 00000138         acabou
  210 00000138         
  211 00000138 BF00            NOP
  212 0000013A         
  213 0000013A 00 00           ALIGN                        ; garante que o fim
                                                             da seção está alin
                                                            hada 
  214 0000013C                 END                          ; fim do arquivo
              20000A00 
              20000B00 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\exemplo.d -o.\exemplo.o -IC:\Users\a1985370\sist-micro\lab0\R
TE -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 -IC:\Keil_v
5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION 
SETA 518" --predefine="TM4C1294NCPDT SETA 1" --list=.\exemplo.lst exemplo.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 13 in file exemplo.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 24 in file exemplo.s
   Uses
      None
Comment: .text unused
Start 00000000

Symbol: Start
   Definitions
      At line 43 in file exemplo.s
   Uses
      At line 27 in file exemplo.s
Comment: Start used once
acabou 00000138

Symbol: acabou
   Definitions
      At line 209 in file exemplo.s
   Uses
      At line 182 in file exemplo.s
Comment: acabou used once
cabonaoprimo 000000EE

Symbol: cabonaoprimo
   Definitions
      At line 158 in file exemplo.s
   Uses
      At line 144 in file exemplo.s
Comment: cabonaoprimo used once
caboprimo 000000D8

Symbol: caboprimo
   Definitions
      At line 146 in file exemplo.s
   Uses
      At line 137 in file exemplo.s
Comment: caboprimo used once
comecaordenacao 000000FC

Symbol: comecaordenacao
   Definitions
      At line 171 in file exemplo.s
   Uses
      At line 156 in file exemplo.s
      At line 165 in file exemplo.s

forexterno 00000106

Symbol: forexterno
   Definitions
      At line 179 in file exemplo.s
   Uses
      At line 206 in file exemplo.s
Comment: forexterno used once
forinterno 00000110




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: forinterno
   Definitions
      At line 186 in file exemplo.s
   Uses
      At line 203 in file exemplo.s
Comment: forinterno used once
loop 000000B2

Symbol: loop
   Definitions
      At line 121 in file exemplo.s
   Uses
      At line 155 in file exemplo.s
      At line 164 in file exemplo.s

primo 000000B6

Symbol: primo
   Definitions
      At line 124 in file exemplo.s
   Uses
      At line 143 in file exemplo.s
Comment: primo used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ALEATORIO 20000A00

Symbol: ALEATORIO
   Definitions
      At line 39 in file exemplo.s
   Uses
      At line 50 in file exemplo.s
      At line 114 in file exemplo.s

ORDENADO 20000B00

Symbol: ORDENADO
   Definitions
      At line 41 in file exemplo.s
   Uses
      At line 115 in file exemplo.s
      At line 180 in file exemplo.s

2 symbols
349 symbols in table
